version: "3.7" 

services:
        db:
                container_name: postgresdb
                image: postgres:14.1-alpine
                restart: always
                environment:
                        - POSTGRES_USER=user
                        - POSTGRES_PASSWORD=password
                ports:
                        -       5432:5432
                volumes: 
                        - ./data/init-armiarma.sql:/docker-entrypoint-initdb.d/docker_postgres_init.sql
                        - ./data:/var/lib/postgresql
#                network_mode: 'host'
        eth2-crawler:
                container_name: eth2Crawler
                image: "armiarma-eth2-crawler:latest"
                build:
                        context: .
                        dockerfile: Dockerfile
#                network_mode: 'host'
                volumes: ["./peerstore:/armiarma/peerstore", "./config-files:/armiarma/config-files", "./bootstrap_nodes/official-eth2-bootnodes.json:/armiarma/bootstrap_nodes/official-eth2-bootnodes.json"]
                environment:
                        - DB_URL=Api:5000
                entrypoint: "/armiarma/armiarma-client eth2 --config-file=./config-files/eth2-config.json"
                depends_on:
                        - "db"
                deploy:
                        restart_policy:
                                condition: on-failure
                                delay: 3s
        
        prometheus:
                image: prom/prometheus:v2.36.2
                volumes:
                - ./prometheus/:/etc/prometheus/
                container_name: prometheus
                ports:
                        -       9091:9090
                command:
                - '--config.file=/etc/prometheus/prometheus.yml'
                - '--storage.tsdb.path=/prometheus'
                - '--web.console.libraries=/usr/share/prometheus/console_libraries'
                - '--web.console.templates=/usr/share/prometheus/consoles'
#                network_mode: 'host'
                restart: always

        grafana:
                build: './grafana'
                container_name: 'grafana'
                ports:
                        -       3000:3000
#                network_mode: 'host'
                environment:
                        - GF_INSTALL_PLUGINS=grafana-worldmap-panel
                        - Datasource=Armiarma
